#include <TinyGPSPlus.h>
TinyGPSPlus gal, gps;
#include <SoftwareSerial.h>
SoftwareSerial ssGAL(11, 10), ssGPS(3,2); // RX, TX




// Set Nav Mode to Airborne 4G
static const uint8_t setNavAir4G[] = {
  0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
  0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x20};           

// Set Nav Mode to Airborne <1G
static const uint8_t setNavAir1G[] = {
  0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
  0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
static const int len_setNav = 42;

// Set only GALILEO GNSS
static const uint8_t setGnssGal[] = {
  0xb5, 0x62, 0x06, 0x3e, 0x3c, 0x00,
  0x00, 0x20, 0x20, 0x07,
  0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01, // GPS
  0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, // SBAS
  0x02, 0x04, 0x08, 0x00, 0x01, 0x00, 0x01, 0x01, // GALILEO
  0x03, 0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01, // BeiDou
  0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x03, // IMES
  0x05, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x05, // QZSS
  0x06, 0x08, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x01 }; // GLONASS

// Set GNSS Config to GPS + Galileo + GLONASS + SBAS (Causes the M8 to restart!)
static const uint8_t setGnssAll[] = {
  0xb5, 0x62, 0x06, 0x3e, 0x3c, 0x00,
  0x00, 0x20, 0x20, 0x07,
  0x00, 0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x01,
  0x01, 0x01, 0x03, 0x00, 0x01, 0x00, 0x01, 0x01,
  0x02, 0x04, 0x08, 0x00, 0x01, 0x00, 0x01, 0x01,
  0x03, 0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01,
  0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x03,
  0x05, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x05,
  0x06, 0x08, 0x0e, 0x00, 0x01, 0x00, 0x01, 0x01 };


// Set only GPS GNSS
static const uint8_t setGnssGps[] = {
  0xb5, 0x62, 0x06, 0x3e, 0x3c, 0x00,
  0x00, 0x20, 0x20, 0x07,
  0x00, 0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x01, // GPS
  0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x01, 0x01, // SBAS
  0x02, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01, 0x01, // GALILEO
  0x03, 0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01, // BeiDou
  0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x03, // IMES
  0x05, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x05, // QZSS
  0x06, 0x08, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x01 }; // GLONASS
static const int len_setGnss = 66;




// Set NMEA 4.1 Protocol
static const uint8_t setNmea4_1[] = {
  0xB5, 0x62, 0x06, 0x17, 0x14, 0x00,
  0x00, 0x41, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
static const int len_setNmea = 26;

void setup() {
  
  Serial.begin(9600);
  ssGAL.begin(9600);
  sendUBX(setNavAir1G, len_setNav, ssGAL); // Set Airborne <1G Navigation Mode
  delay(10);  
  sendUBX(setNmea4_1, len_setNmea, ssGAL); // Set GNSS to only Galileo
  delay(10);
  sendUBX(setGnssGal, len_setGnss, ssGAL); // Set GNSS to only Galileo
  delay(10);
//  sendUBX(setNavAir1G, len_setNav, ssGPS); // Set Airborne <1G Navigation Mode
  delay(10);  
 // sendUBX(setNmea4_1, len_setNmea, ssGPS); // Set GNSS to only Galileo
  delay(10);
  //sendUBX(setGnssGps, len_setGnss, ssGPS); // Set GNSS to only Galileo
  delay(10); 

}

bool rawDebug = false;
String gnssDevice = "GPS";

void loop() { // run over and over
  if(gnssDevice == "GAL"){
  if (rawDebug == true){
  if (ssGAL.available()) {
    Serial.write(ssGAL.read());
  }
  if (Serial.available()) {
    ssGAL.write(Serial.read());
  }
  }
 else{
      while (ssGAL.available() > 0)
    if (gal.encode(ssGAL.read()))
    displayInfo(gal);
  
}
  }

    if(gnssDevice == "GPS"){
  if (rawDebug == true){
  if (ssGPS.available()) {
    Serial.write(ssGPS.read());
  }
  if (Serial.available()) {
    ssGPS.write(Serial.read());
  }
  }
 else{
      while (ssGPS.available() > 0)
    if (gps.encode(ssGPS.read()))
    displayInfo(gps);
  
}
  }


}



void sendUBX(const uint8_t *message, const int len, SoftwareSerial serial) {
  int csum1 = 0; // Checksum bytes
  int csum2 = 0;
  for (int i=0; i<len; i++) { // For each byte in the message
    serial.write(message[i]); // Write the byte
    if (i >= 2) { // Don't include the sync chars in the checksum
      csum1 = csum1 + message[i]; // Update the checksum bytes
      csum2 = csum2 + csum1;
    }
  }
  csum1 = csum1 & 0xff; // Limit checksums to 8-bits
  csum2 = csum2 & 0xff;
  serial.write((uint8_t)csum1); // Send the checksum bytes
  serial.write((uint8_t)csum2);
}

void displayInfo(TinyGPSPlus gps)
{
  
  Serial.print(F(" "));
  if (gps.time.isValid())
  {
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour());
    Serial.print(F(":"));
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(F(":"));
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.print(gps.time.second());
    Serial.print(F("."));
    if (gps.time.centisecond() < 10) Serial.print(F("0"));
    Serial.print(gps.time.centisecond());
  }
  else
  {
    Serial.print(F("INVALID"));
  }
  Serial.print(",");
  if (gps.location.isValid())
  {
    Serial.print(gps.location.lat(), 6);
    Serial.print(F(","));
    Serial.print(gps.location.lng(), 6);
  }
  else
  {
    Serial.print(F("INVALID"));
  }
  Serial.print(",");
  if (gps.satellites.isValid())
  {
    Serial.print(gps.satellites.value());}
  else
  {
    Serial.print(F("INVALID"));
  }
  Serial.print(",");
  if (gps.hdop.isValid())
  {
    Serial.print(gps.hdop.hdop());}
  else
  {
    Serial.print(F("INVALID"));
  }
  Serial.println();
}
